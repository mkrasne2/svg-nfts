import React, { useEffect, useState } from "react";
import './App.css';
import { Helmet } from 'react-helmet';

const About = () => {
	
  return (
		<div className="App">
      <Helmet>
        <title>About the Generative SVG NFT Project</title>
        <meta name="description" content="Learn about the technical fundamentals that power this test NFT project on the Polygon Mumbai network." />
        
      </Helmet>
		
      <div className="container">
        <div className="header-container">
        <header>
        
          
         </header>
				<div >
        <p className="title">About the Generative NFT Project</p>
        <br></br>
        <p className="subtitle">A few technical details</p>
            
						
            </div>
          
        </div>
       
				<p className = "rules"><strong>Overview:</strong>
        <br></br>
        <br></br>
        This system uses both the ERC721 standard in addition to the VRF (Verifiable Random Function) V2 from Chainlink that allows users to directly take part in the
        minting process. During the NFT mint, a 400 x 400 pixel SVG is automatically created, and the design is randomly generated by the algorithm that uses the 
        verifiable random number. This function automatically alters different variables such as how many corners the polygon in the SVG contains, the background color,
        the color of the polygon, the polygon's border color and thickness, and other traits. It is statistically near impossible to randomly generate an NFT that has 
        previously been generated.
        <br></br>
        <br></br>
        <br></br>
        <br></br>
        <strong>Process:</strong>
        <br></br>
        <br></br>
        1. When the user visits the Mint page they are prompted to generate randomness - this initiates a call to the VRF
        <br></br>
        2. Once the VRF has returned a random number, the number is assigned to the user's address who made the call
        <br></br>
        3. Only then is the user able to mint an NFT. If they try to mint prior to requesting randomness, the smart contract will prevent them from doing so
        <br></br>
        4. During the minting process the smart contract takes the random number assigned to the user and automatically generates an additional 36 or so random
        numbers that are used as variables when creating the SVG.
        <br></br>
        5. Once the SVG has been created it is assigned as the URI for that NFT. The user can choose to view the NFT within the website's frontend, or click into
        the SVG to view it on Opensea.
        <br></br>
        <br></br>
        <br></br>
        <br></br>
        <strong>Frontend:</strong>
        <br></br>
        <br></br>
        Built with React, ethers.js, react-bootstrap.
        <br></br>
        <br></br>
        <br></br>
        <br></br>
        <strong>Network:</strong>
        <br></br>
        <br></br>
        Due to easy testnet MATIC accessibility, I've deployed this project to Polygon Mumbai. The frontend will prompt you to switch to Polygon Mumbai if you 
        are connected to a different network. 
        <br></br>
        <br></br>
        <br></br>
        <br></br>
        <strong>Creator Fees & Cap:</strong>
        <br></br>
        <br></br>
        I did not set a mint cap or creator fees for this project, though these could easily be added in.
        <br></br>
        <br></br>
        <br></br>
        <br></br>
        <strong>Contract links:</strong>
        <br></br>
        <br></br>
        You can find the contract links here:
        <br></br>
        <br></br>
        <a href="https://mumbai.polygonscan.com/address/0xC09b911458c417eB96D1eF53F1300829115D3eEf#code">Contract on Polygonscan</a>
        <br></br>
        <br></br>
        
        </p>
        <div className="footer-container">
        </div>
      </div>
			
			
			
    </div>
  );
};

export default About;